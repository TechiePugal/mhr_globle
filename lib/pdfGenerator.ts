"use client"

import { jsPDF } from "jspdf"
import autoTable from "jspdf-autotable"
import type { MachineData } from "./firebaseService"

// Extend jsPDF type
interface ExtendedJsPDF extends jsPDF {
  autoTable: typeof autoTable
}

export const generateAllMachinesReport = (machines: MachineData[]) => {
  try {
    const doc = new jsPDF() as ExtendedJsPDF
    const pageWidth = doc.internal.pageSize.width
    const pageHeight = doc.internal.pageSize.height

    // Header
    doc.setFontSize(20)
    doc.setFont("helvetica", "bold")
    doc.text("Machine Hour Rate Calculator", pageWidth / 2, 20, { align: "center" })

    doc.setFontSize(16)
    doc.text("All Machines Summary Report", pageWidth / 2, 30, { align: "center" })

    // Date
    doc.setFontSize(10)
    doc.setFont("helvetica", "normal")
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth - 20, 15, { align: "right" })

    // Summary Statistics
    const totalMachines = machines.length
    const completedCalculations = machines.filter((m) => m.calculationData?.machineHourRate).length
    const totalInvestment = machines.reduce((sum, m) => sum + (m.investmentData?.machineCost || 0), 0)
    const averageHourRate =
      machines.length > 0
        ? machines.reduce((sum, m) => sum + (m.calculationData?.machineHourRate || 0), 0) / machines.length
        : 0

    doc.setFontSize(12)
    doc.setFont("helvetica", "bold")
    doc.text("Summary Statistics", 20, 50)

    doc.setFont("helvetica", "normal")
    doc.text(`Total Machines: ${totalMachines}`, 20, 60)
    doc.text(`Completed Calculations: ${completedCalculations}`, 20, 68)
    doc.text(`Total Investment: ₹${totalInvestment.toLocaleString()}`, 20, 76)
    doc.text(`Average Hour Rate: ₹${averageHourRate.toFixed(2)}`, 20, 84)

    // Machines Table
    const tableData = machines.map((machine) => [
      machine.machineName || "Unnamed",
      `₹${(machine.investmentData?.machineCost || 0).toLocaleString()}`,
      `${machine.investmentData?.lifeOfMachine || 0} years`,
      `${machine.powerData?.machinePower || 0} kW`,
      machine.calculationData?.machineHourRate
        ? `₹${machine.calculationData.machineHourRate.toFixed(2)}`
        : "Not Calculated",
      machine.calculationData?.profit ? `${machine.calculationData.profit}%` : "N/A",
    ])

    autoTable(doc, {
      head: [["Machine Name", "Investment", "Life", "Power", "Hour Rate", "Profit %"]],
      body: tableData,
      startY: 95,
      styles: {
        fontSize: 9,
        cellPadding: 3,
      },
      headStyles: {
        fillColor: [59, 130, 246] as [number, number, number],
        textColor: 255,
        fontStyle: "bold",
      },
      alternateRowStyles: {
        fillColor: [248, 250, 252] as [number, number, number],
      },
      margin: { left: 20, right: 20 },
    })

    // Footer
    const finalY = (doc as any).lastAutoTable?.finalY || 150
    if (finalY < pageHeight - 30) {
      doc.setFontSize(8)
      doc.setFont("helvetica", "italic")
      doc.text("Generated by Machine Hour Rate Calculator", pageWidth / 2, pageHeight - 10, { align: "center" })
    }

    return doc
  } catch (error) {
    console.error("Error generating PDF:", error)
    throw new Error("Failed to generate PDF report")
  }
}

export const generateSingleMachineReport = (machine: MachineData) => {
  try {
    const doc = new jsPDF() as ExtendedJsPDF
    const pageWidth = doc.internal.pageSize.width
    const pageHeight = doc.internal.pageSize.height
    let currentY = 20

    // Header
    doc.setFontSize(20)
    doc.setFont("helvetica", "bold")
    doc.text("Machine Hour Rate Calculator", pageWidth / 2, currentY, { align: "center" })
    currentY += 10

    doc.setFontSize(16)
    doc.text("Detailed Machine Report", pageWidth / 2, currentY, { align: "center" })
    currentY += 15

    // Date
    doc.setFontSize(10)
    doc.setFont("helvetica", "normal")
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth - 20, 15, { align: "right" })

    // Machine Name
    doc.setFontSize(14)
    doc.setFont("helvetica", "bold")
    doc.text(`Machine: ${machine.machineName || "Unnamed Machine"}`, 20, currentY)
    currentY += 15

    // Investment Details
    doc.setFontSize(12)
    doc.setFont("helvetica", "bold")
    doc.text("1. Investment Details", 20, currentY)
    currentY += 8

    const investmentData = [
      ["Machine Cost", `₹${(machine.investmentData?.machineCost || 0).toLocaleString()}`],
      ["Life of Machine", `${machine.investmentData?.lifeOfMachine || 0} years`],
      ["Working Hours/Day", `${machine.investmentData?.workingHoursPerDay || 0} hours`],
      ["Balance Life", `${machine.investmentData?.balanceLifeOfMachine || 0} years`],
      ["Interest Rate", `${machine.investmentData?.interestRate || 0}%`],
      ["Scrap Rate", `${machine.investmentData?.scrapRate || 0}%`],
      ["Machine Life Hours", `${machine.investmentData?.machineLifeHours?.toLocaleString() || "N/A"}`],
      ["Current Value", `₹${(machine.investmentData?.currentValueOfMachine || 0).toLocaleString()}`],
    ]

    autoTable(doc, {
      body: investmentData,
      startY: currentY,
      styles: { fontSize: 9, cellPadding: 2 },
      columnStyles: {
        0: { fontStyle: "bold", cellWidth: 60 },
        1: { cellWidth: 80 },
      },
      margin: { left: 20, right: 20 },
    })

    currentY = (doc as any).lastAutoTable?.finalY + 10 || currentY + 50

    // Space Expenses
    doc.setFont("helvetica", "bold")
    doc.text("2. Space Expenses", 20, currentY)
    currentY += 8

    const spaceData = [
      ["Factory Rent/Month", `₹${(machine.spaceData?.factoryRentPerMonth || 0).toLocaleString()}`],
      ["Factory Space", `${machine.spaceData?.factorySpaceInSqFt || 0} sq ft`],
      ["Machine Space", `${machine.spaceData?.spaceOccupiedByMachine || 0} sq ft`],
      ["No. of Machines", `${machine.spaceData?.numberOfMachinesInFactory || 0}`],
      ["Common Space", `${machine.spaceData?.commonSpaceInSqFt || 0} sq ft`],
    ]

    autoTable(doc, {
      body: spaceData,
      startY: currentY,
      styles: { fontSize: 9, cellPadding: 2 },
      columnStyles: {
        0: { fontStyle: "bold", cellWidth: 60 },
        1: { cellWidth: 80 },
      },
      margin: { left: 20, right: 20 },
    })

    currentY = (doc as any).lastAutoTable?.finalY + 10 || currentY + 40

    // Power Consumption
    doc.setFont("helvetica", "bold")
    doc.text("3. Power Consumption", 20, currentY)
    currentY += 8

    const powerData = [
      ["Machine Power", `${machine.powerData?.machinePower || 0} kW`],
      ["Motor Running Time", `${machine.powerData?.effectiveRunningTimeOfMotors || 0}%`],
      ["Utilization", `${machine.powerData?.utilization || 0}%`],
      ["Electricity Rate", `₹${machine.powerData?.electricityUnitRate || 0}/kWh`],
      ["Fan Power", `${machine.powerData?.powerOfFan || 0} W × ${machine.powerData?.numberOfFansAroundMachine || 0}`],
      [
        "Light Power",
        `${machine.powerData?.powerOfLight || 0} W × ${machine.powerData?.numberOfLightsAroundMachine || 0}`,
      ],
      ["Compressor Power", `${machine.powerData?.compressorPower || 0} kW`],
      ["Genset Unit Rate", `₹${machine.powerData?.gensetUnitRate?.toFixed(2) || 0}/kWh`],
    ]

    autoTable(doc, {
      body: powerData,
      startY: currentY,
      styles: { fontSize: 9, cellPadding: 2 },
      columnStyles: {
        0: { fontStyle: "bold", cellWidth: 60 },
        1: { cellWidth: 80 },
      },
      margin: { left: 20, right: 20 },
    })

    currentY = (doc as any).lastAutoTable?.finalY + 10 || currentY + 60

    // Check if we need a new page
    if (currentY > pageHeight - 80) {
      doc.addPage()
      currentY = 20
    }

    // Consumables
    doc.setFont("helvetica", "bold")
    doc.text("4. Consumables & Maintenance", 20, currentY)
    currentY += 8

    const consumablesData = [
      [
        "Coolant Oil/Month",
        `${machine.consumablesData?.coolantOilTopUpPerMonth || 0} L @ ₹${machine.consumablesData?.coolantOilCostPerLitre || 0}/L`,
      ],
      [
        "Waste/Month",
        `${machine.consumablesData?.wasteUsagePerMonth || 0} Kg @ ₹${machine.consumablesData?.costOfWastePerKg || 0}/Kg`,
      ],
      ["Monthly Maintenance", `₹${(machine.consumablesData?.monthlyMaintenanceCost || 0).toLocaleString()}`],
      ["Annual Maintenance", `₹${(machine.consumablesData?.annualMaintenanceCost || 0).toLocaleString()}`],
      ["Other Consumables", `₹${(machine.consumablesData?.otherConsumablesPerMonth || 0).toLocaleString()}`],
    ]

    autoTable(doc, {
      body: consumablesData,
      startY: currentY,
      styles: { fontSize: 9, cellPadding: 2 },
      columnStyles: {
        0: { fontStyle: "bold", cellWidth: 60 },
        1: { cellWidth: 80 },
      },
      margin: { left: 20, right: 20 },
    })

    currentY = (doc as any).lastAutoTable?.finalY + 10 || currentY + 40

    // Tools & Wages
    doc.setFont("helvetica", "bold")
    doc.text("5. Tools & Direct Labor", 20, currentY)
    currentY += 8

    const toolsWagesData = [
      ["Tool Cost/Month", `₹${(machine.toolsWagesData?.averageToolCostPerMonth || 0).toLocaleString()}`],
      ["Operator Salary", `₹${(machine.toolsWagesData?.operatorSalaryPerMonth || 0).toLocaleString()}`],
      ["Helper Salary", `₹${(machine.toolsWagesData?.helperSalaryPerMonth || 0).toLocaleString()}`],
      ["QC Inspector Salary", `₹${(machine.toolsWagesData?.qualityInspectorSalaryPerMonth || 0).toLocaleString()}`],
    ]

    autoTable(doc, {
      body: toolsWagesData,
      startY: currentY,
      styles: { fontSize: 9, cellPadding: 2 },
      columnStyles: {
        0: { fontStyle: "bold", cellWidth: 60 },
        1: { cellWidth: 80 },
      },
      margin: { left: 20, right: 20 },
    })

    currentY = (doc as any).lastAutoTable?.finalY + 10 || currentY + 30

    // Overheads
    doc.setFont("helvetica", "bold")
    doc.text("6. Overhead Costs", 20, currentY)
    currentY += 8

    const overheadsData = [
      [
        "Production Supervisor",
        `₹${(machine.overheadsData?.productionSupervisorSalaryPerMonth || 0).toLocaleString()}`,
      ],
      ["Quality Supervisor", `₹${(machine.overheadsData?.qualitySupervisorSalaryPerMonth || 0).toLocaleString()}`],
      ["Engineer", `₹${(machine.overheadsData?.engineerSalaryPerMonth || 0).toLocaleString()}`],
      ["Manager", `₹${(machine.overheadsData?.managerSalaryPerMonth || 0).toLocaleString()}`],
      ["Admin Staff", `₹${(machine.overheadsData?.adminStaffSalaryPerMonth || 0).toLocaleString()}`],
    ]

    autoTable(doc, {
      body: overheadsData,
      startY: currentY,
      styles: { fontSize: 9, cellPadding: 2 },
      columnStyles: {
        0: { fontStyle: "bold", cellWidth: 60 },
        1: { cellWidth: 80 },
      },
      margin: { left: 20, right: 20 },
    })

    currentY = (doc as any).lastAutoTable?.finalY + 15 || currentY + 40

    // Final Calculation
    if (machine.calculationData) {
      doc.setFontSize(14)
      doc.setFont("helvetica", "bold")
      doc.text("7. Final Machine Hour Rate Calculation", 20, currentY)
      currentY += 10

      const calculationData = [
        ["Investment Cost/Hour", `₹${machine.calculationData.investmentCost.toFixed(2)}`],
        ["Space Cost/Hour", `₹${machine.calculationData.spaceCost.toFixed(2)}`],
        ["Power Cost/Hour", `₹${machine.calculationData.powerCost.toFixed(2)}`],
        ["Consumables Cost/Hour", `₹${machine.calculationData.consumablesCost.toFixed(2)}`],
        ["Tool Cost/Hour", `₹${machine.calculationData.toolCost.toFixed(2)}`],
        ["Wages/Hour", `₹${machine.calculationData.wages.toFixed(2)}`],
        ["Salaries/Hour", `₹${machine.calculationData.salary.toFixed(2)}`],
        ["", ""],
        [
          "Total Cost/Hour",
          `₹${(machine.calculationData.investmentCost + machine.calculationData.spaceCost + machine.calculationData.powerCost + machine.calculationData.consumablesCost + machine.calculationData.toolCost + machine.calculationData.wages + machine.calculationData.salary).toFixed(2)}`,
        ],
        ["Profit Margin", `${machine.calculationData.profit}%`],
        ["MACHINE HOUR RATE", `₹${machine.calculationData.machineHourRate.toFixed(2)}`],
      ]

      autoTable(doc, {
        body: calculationData,
        startY: currentY,
        styles: { fontSize: 10, cellPadding: 3 },
        columnStyles: {
          0: { fontStyle: "bold", cellWidth: 80 },
          1: { cellWidth: 60, halign: "right" },
        },
        didParseCell: (data: any) => {
          if (data.row.index === calculationData.length - 1) {
            data.cell.styles.fillColor = [34, 197, 94] as [number, number, number]
            data.cell.styles.textColor = 255
            data.cell.styles.fontStyle = "bold"
            data.cell.styles.fontSize = 12
          } else if (data.row.index === calculationData.length - 3) {
            data.cell.styles.fillColor = [59, 130, 246] as [number, number, number]
            data.cell.styles.textColor = 255
            data.cell.styles.fontStyle = "bold"
          }
        },
        margin: { left: 20, right: 20 },
      })
    }

    // Footer
    doc.setFontSize(8)
    doc.setFont("helvetica", "italic")
    doc.text("Generated by Machine Hour Rate Calculator", pageWidth / 2, pageHeight - 10, { align: "center" })

    return doc
  } catch (error) {
    console.error("Error generating single machine PDF:", error)
    throw new Error("Failed to generate machine report")
  }
}
